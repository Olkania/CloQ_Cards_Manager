FORMAT: 1A
HOST: https://systemgenerowaniakartczasupracy.apiblueprint.org/

# WeWork

It is an API of *WeWork* - System of generating employee's clockcards

# Group Log-in-out

## Log-in [/login/{?log,pass}]

### Login [POST]
+ Parameters
    
    + log: user1 (string) - User's login to System
    + pass: pass1 (string) - User's password to System
    
+ Response 200 (application/json)

        {
            "Token": "1234567890"
        }
        
+ Response 400 (text/plain)

        {
            "Message": "Bad Request"
        }
        
## Log-out [/logout]

### Logout [DELETE]
+ Response 200 (application/json)

        {
            "Message": "Logout: Done"
        }
        
+ Response 400 (text/plain)

        {
            "Message": "Bad Request"
        }


# Group User API

## User [/users/{?Login,Password,FirstName,LastName,AccountType,Email,AccountNo}]

+ Parameters

    + Login (string) - User's login
    + Password (int) - User's password
    + FirstName (string) - User's first name
    + LastName (string) - User's last name
    + AccountType (enum) - User's type of account
    + Email (string) - User's e-mail address
    + AccountNo (string) - User's login

### Add New User [POST]
+ Request

        {
            "Login": "jankow4822",
            "Password": 4932
            "FirstName": "Jan",
            "LastName": "Kowalski",
            "AccountType": "Employee",
            "E-mail": "jankowalski@gmail.com",
            "AccountNo": "PL11240000000000009999117429"
        }
        
+ Response 200 (application/json)

        {
            "Meesage": "Add: Done."
        }

+ Response 400 (text/plain)

        {
            "Message": "Bad Request"
        }
        
### Edit User [PUT]
+ Response 200 (application/json)

        {
            "Meesage": "Edit: Done."
        }

+ Response 400 (text/plain)

        {
            "Message": "Bad Request"
        }

### Delete User [DELETE]
+ Response 200 (application/json)

        {
            "Meesage": "Delete: Done."
        }

+ Response 400 (text/plain)

        {
            "Message": "Bad Request"
        }

### List All Users [GET]
+ Response 200 (application/json)

        {
            "Login": "jankow4822",
            "Password": 4932
            "FirstName": "Jan",
            "LastName": "Kowalski",
            "AccountType": "Employee",
            "E-mail": "jankowalski@gmail.com",
            "AccountNo": "PL11240000000000009999117429"
        }

+ Response 400 (text/plain)

        {
            "Message": "Bad Request"
        }


# Group Employee API

## Employee [/employee/{?EmployeeID,Login,Department,ManagerID,PositionID}]

+ Parameters

    + EmployeeID (int) - Employee's ID
    + Login (string) - Employee's login
    + Department (string) - Employee's department
    + ManagerID (int) - Employee's manager's ID
    + PositionID (int) - Employee's position's ID

### Add New Employee [POST/employees/EmployeeID={EmployeeID}&Login={Login}&Department={Department}&ManagerID={ManagerID}&PositionID={PositionID]
+ Request

        {
            "EmployeeID": 10010422,
            "Login": "jankow4822",
            "Department": "DepA",
            "ManagerID": 101,
            "PositionID": 53
        }
        
+ Response 200 (application/json)

        {
            "Meesage": "Add: Done."
        }

+ Response 400 (text/plain)

        {
            "Message": "Bad Request"
        }
        
### Edit Employee [PUT/users/EmployeeID={EmployeeID}&Login={Login}&Department={Department}&ManagerID={ManagerID}&PositionID={PositionID}]
+ Response 200 (application/json)

        {
            "Meesage": "Edit: Done."
        }

+ Response 400 (text/plain)

        {
            "Message": "Bad Request"
        }

### Delete Employee [DELETE/employees/EmployeeID={EmployeeID}]
+ Response 200 (application/json)

        {
            "Meesage": "Delete: Done."
        }

+ Response 400 (text/plain)

        {
            "Message": "Bad Request"
        }

### List All Employees [GET]
+ Response 200 (application/json)

    + Body

            {    
                [
                    {
                        "Message": "List of all employees: ",
                        "employees": 
                        [
                            {
                                "EmployeeID": 10010422,
                                "Login": "jankow4822",
                                "Department": "DepA",
                                "ManagerID": 101,
                                "PositionID": 53
                            }, {
                                "EmployeeID": 10010432,
                                "Login": "jankow4822",
                                "Department": "DepA",
                                "ManagerID": 101,
                                "PositionID": 53
                            }, {
                                "EmployeeID": 10010420,
                                "Login": "jankow4822",
                                "Department": "DepA",
                                "ManagerID": 101,
                                "PositionID": 53
                            }, 
                        ]
                    }
                ]
            }
            
+ Response 400 (text/plain)

        {
            "Message": "Bad Request"
        }

            
# Group Manager API

## Manager [/managers/{?ManagerID,Login}]

+ Parameters

    + ManagerID (int) - Manager's ID
    + Login (string) - Manager's login

### Add New Manager [POST]
+ Response 200 (application/json)

        {
            "Meesage": "Add: Done."
        }

+ Response 400 (text/plain)

        {
            "Message": "Bad Request"
        }


### Delete Manager [DELETE]
+ Response 200 (application/json)

        {
            "Meesage": "Delete: Done."
        }

+ Response 400 (text/plain)

        {
            "Message": "Bad Request"
        }


# Group Position API

## Position [/positions/{?PositionID,PositionName,Salary}]

+ Parameters

    + PositionID (int) - Position's ID
    + PositionName (string) - Position name's
    + Salary (int) - Salary assigned to position

### List All Positions [GET]
+ Response 200 (application/json)

        {
        
        }

+ Response 400 (text/plain)

        {
            "Message": "Bad Request"
        }


# Group Gate API

## Gate [/gates/{?GateID,Login}]

+ Parameters

    + GateID (int) - Gate's ID
    + Login (string) - User's login


# Group Register API

## Register [/registers/{?RegisterID,EmployeeID,GateID,DateIn,TimeIn,DateOut,TimeOut}]

+ Parameters

    + RegisterID (int) - Register's ID
    + EmployeeID (int) - Employee's ID
    + GateID (int) - Gate's ID
    + DateIn (date) - Start date of work
    + TimeIn (time) - Start time of work
    + DateOut (date) - End date of work
    + TimeOut (time) - End time of work

### Add New Register [POST]
+ Request

        {
            "RegisterID": 1,
            "GateID": 1,
            "DateIn": "2023-01-01",
            "HourIn": "08:00",
            "DateOut": "2023-01-01",
            "HourOut": "16:00"
        }
        
+ Response 200 (application/json)

        {
            "Meesage": "Add: Done."
        }

+ Response 400 (text/plain)

        {
            "Message": "Bad Request"
        }

### Read Register [GET]
+ Response 200 (application/json)

        {
            
        }

+ Response 400 (text/plain)

        {
            "Message": "Bad Request"
        }

### Delete Register [DELETE]
+ Response 200 (application/json)

        {
            "Meesage": "Delete: Done."
        }

+ Response 400 (text/plain)

        {
            "Message": "Bad Request"
        }

### Update Register [PUT]
+ Response 200 (application/json)

        {
            "Meesage": "Update: Done."
        }

+ Response 400 (text/plain)

        {
            "Message": "Bad Request"
        }
        

# Group Leave API

## Leave [/leaves/{?LeaveID,EmployeeID,DateStart,DateEnd,LeaveType,Decision}]

+ Parameters

    + LeaveID (int) - Leave's ID
    + EmployeeID (int) - Employee's ID
    + DateStart (date) - Start date of leave
    + DateEnd (date) - End date of leave
    + LeaveType (string) - Leave's type
    + Decision (bool) - Manager's approval/refusal of leave

### Add New Leave [POST]
+ Request

        {
            "LeaveID": 1,
            "EmployeeID": 1,
            "StartDate": "2.1.2023",
            "EndDate": "3.1.2023",
            "LeaveType": "sick",
            "Acceptance": 1
        }
        
+ Response 200 (application/json)

        {
            "Meesage": "Add: Done."
        }

+ Response 400 (text/plain)

        {
            "Message": "Bad Request"
        }

### Update Leave [PUT]
+ Request 

        {
            "LeaveID": 1,
            "EmployeeID": 1,
            "StartDate": "2.1.2023",
            "EndDate": "3.1.2023",
            "LeaveType": "sick",
            "Acceptance": 1
        }

+ Response 200 (application/json)

        {
            "Meesage": "Update: Done."
        }

+ Response 400 (text/plain)

        {
            "Message": "Bad Request"
        }